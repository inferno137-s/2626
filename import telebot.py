import telebot
from telebot import types
from datetime import datetime, timedelta
import schedule
import time
import threading
import random

bot = telebot.TeleBot("7677815065:AAHAJOUVybTC2VnUiK41dr9X7A3fl7NKmXE")

user_data = {}

categories = ["–ï–¥–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–ñ–∏–ª—å–µ", "–î—Ä—É–≥–æ–µ"]

advice_list = [
    "–°–æ–∑–¥–∞–π—Ç–µ –±—é–¥–∂–µ—Ç –∏ —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π—Ç–µ –µ–º—É.",
    "–û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ 10% –æ—Ç –∫–∞–∂–¥–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã.",
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤.",
    "–ò–∑–±–µ–≥–∞–π—Ç–µ –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫.",
    "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ.",
    "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–≤–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ.",
    "–°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Ü–µ–Ω—ã –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π.",
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–±—ç–∫-—Å–µ—Ä–≤–∏—Å—ã.",
    "–†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏.",
    "–ò–∑–±–µ–≥–∞–π—Ç–µ –¥–æ–ª–≥–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏.",
    "–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–¥—É—à–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ 3-6 –º–µ—Å—è—Ü–µ–≤.",
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç.",
    "–ü–æ–∫—É–ø–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ —Å–µ–∑–æ–Ω —Ä–∞—Å–ø—Ä–æ–¥–∞–∂.",
    "–ù–µ –±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è.",
    "–†–µ–≥—É–ª—è—Ä–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã.",
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ 50/30/20: 50% –Ω–∞ –Ω—É–∂–¥—ã, 30% –Ω–∞ –∂–µ–ª–∞–Ω–∏—è, 20% –Ω–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è.",
    "–ù–µ —Ö—Ä–∞–Ω–∏—Ç–µ –≤—Å–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–µ.",
    "–ò–∑—É—á–∞–π—Ç–µ –æ—Å–Ω–æ–≤—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏.",
    "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è.",
    "–ò–∑–±–µ–≥–∞–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.",
]

def send_notifications():
    while True:
        schedule.run_pending()
        time.sleep(1)

notification_thread = threading.Thread(target=send_notifications)
notification_thread.daemon = True
notification_thread.start()

@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, "üéâ –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç!")
    show_main_menu(message)

def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–†–∞—Å—Ö–æ–¥—ã", "–ö–∞–ª–µ–Ω–¥–∞—Ä—å", "–ü—Ä–æ—Ñ–∏–ª—å", "–ù–æ—Ä–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤", "–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", "–°–æ–≤–µ—Ç—ã"]
    markup.add(*[types.KeyboardButton(btn) for btn in buttons])
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:", reply_markup=markup)

@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == "–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":
        survey(message)
    elif message.text == "–†–∞—Å—Ö–æ–¥—ã":
        add_expense(message)
    elif message.text == "–ö–∞–ª–µ–Ω–¥–∞—Ä—å":
        handle_calendar(message)
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å":
        show_profile(message)
    elif message.text == "–ù–æ—Ä–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤":
        show_expense_norm(message)
    elif message.text == "–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥":
        delete_last_expense(message)
    elif message.text == "–°–æ–≤–µ—Ç—ã":
        send_random_advice(message)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")

def send_random_advice(message):
    chat_id = message.chat.id
    random_advice = random.choice(advice_list)
    bot.send_message(chat_id, f"üí° –°–æ–≤–µ—Ç –¥–Ω—è:\n\n{random_advice}")

def survey(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler(message, save_name)

def save_name(message):
    chat_id = message.chat.id
    name = message.text.strip()
    
    if name:
        user_data[chat_id] = {'name': name, 'expenses': []}
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:")
        bot.register_next_step_handler(message, save_workplace)
    else:
        bot.send_message(chat_id, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        survey(message)

def save_workplace(message):
    chat_id = message.chat.id
    workplace = message.text.strip()
    
    if workplace:
        user_data[chat_id]['workplace'] = workplace
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∑–∞—Ä–ø–ª–∞—Ç—É:")
        bot.register_next_step_handler(message, save_salary)
    else:
        bot.send_message(chat_id, "–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        save_workplace(message)

def save_salary(message):
    chat_id = message.chat.id
    try:
        salary = float(message.text)
        user_data[chat_id]['salary'] = salary
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∞–≤–∞–Ω—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–µ–Ω—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, 15):")
        bot.register_next_step_handler(message, save_advance_date)
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        save_salary(message)

def save_advance_date(message):
    chat_id = message.chat.id
    try:
        day = int(message.text.strip())
        today = datetime.now()
        advance_date = today.replace(day=day).date()
        
        if advance_date < today.date():
            advance_date = advance_date.replace(month=today.month + 1)
        
        user_data[chat_id]['advance_date'] = advance_date
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∑–∞—Ä–ø–ª–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–µ–Ω—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, 30):")
        bot.register_next_step_handler(message, save_salary_date)
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        save_advance_date(message)

def save_salary_date(message):
    chat_id = message.chat.id
    try:
        day = int(message.text.strip())
        today = datetime.now()
        salary_date = today.replace(day=day).date()
        
        if salary_date < today.date():
            salary_date = salary_date.replace(month=today.month + 1)
        
        user_data[chat_id]['salary_date'] = salary_date
        
        
        if 'name' in user_data[chat_id] and 'workplace' in user_data[chat_id] and 'salary' in user_data[chat_id] and 'advance_date' in user_data[chat_id] and 'salary_date' in user_data[chat_id]:
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            buttons = ["–†–∞—Å—Ö–æ–¥—ã", "–ö–∞–ª–µ–Ω–¥–∞—Ä—å", "–ü—Ä–æ—Ñ–∏–ª—å", "–ù–æ—Ä–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤", "–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", "–°–æ–≤–µ—Ç—ã"]
            markup.add(*[types.KeyboardButton(btn) for btn in buttons])
            
            bot.send_message(chat_id, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)
            setup_notifications(chat_id)
        else:
            bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        save_salary_date(message)

def add_expense(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*[types.KeyboardButton(category) for category in categories])
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, save_expense_category)

def save_expense_category(message):
    chat_id = message.chat.id
    category = message.text.strip()
    
    if category in categories:
        user_data[chat_id]['current_category'] = category
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
        bot.register_next_step_handler(message, save_expense_amount)
    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        add_expense(message)

def save_expense_amount(message):
    chat_id = message.chat.id
    try:
        expense_amount = float(message.text)
        category = user_data[chat_id]['current_category']
        
        if 'expenses' not in user_data[chat_id]:
            user_data[chat_id]['expenses'] = []
        
        user_data[chat_id]['expenses'].append({
            'amount': expense_amount,
            'category': category,
            'date': datetime.now().strftime("%d.%m.%Y %H:%M")
        })
        
        bot.send_message(chat_id, f"–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {expense_amount} —É.–µ. (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}).")
        show_main_menu(message)
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        save_expense_amount(message)

def delete_last_expense(message):
    chat_id = message.chat.id
    if 'expenses' in user_data.get(chat_id, {}) and user_data[chat_id]['expenses']:
        last_expense = user_data[chat_id]['expenses'].pop()
        bot.send_message(chat_id, f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —É–¥–∞–ª–µ–Ω: {last_expense['amount']} —É.–µ. (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {last_expense['category']}).")
    else:
        bot.send_message(chat_id, "–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    show_main_menu(message)

def show_profile(message):
    chat_id = message.chat.id
    user_info = user_data.get(chat_id)
    
    if user_info:
        expenses = user_info.get('expenses', [])
        total_expenses = sum(expense['amount'] for expense in expenses)
        
        profile_info = (
            f"üë§ –ò–º—è: {user_info.get('name')}\n"
            f"üè¢ –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: {user_info.get('workplace')}\n"
            f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {user_info.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —É.–µ.\n"
            f"üìÖ –î–∞—Ç–∞ –∞–≤–∞–Ω—Å–∞: {user_info.get('advance_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã: {user_info.get('salary_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_expenses} —É.–µ.\n"
            f"üìä –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
        )
        category_expenses = {}
        for expense in expenses:
            category = expense['category']
            if category not in category_expenses:
                category_expenses[category] = 0
            category_expenses[category] += expense['amount']
        
        for category, amount in category_expenses.items():
            profile_info += f"  - {category}: {amount} —É.–µ.\n"
        
        bot.send_message(chat_id, profile_info)
    else:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

def show_expense_norm(message):
    chat_id = message.chat.id
    user_info = user_data.get(chat_id)

    if user_info:
        salary = user_info.get('salary', 0)
        expenses = sum(expense['amount'] for expense in user_info.get('expenses', []))
        remaining_money = salary - expenses

        if remaining_money > 0:
            days_until_salary = (user_info.get('salary_date') - datetime.now().date()).days
            if days_until_salary > 0:
                daily_expense_limit = remaining_money / days_until_salary
            else:
                daily_expense_limit = 0

            emergency_fund = salary * 0.1

            norm_message = (
                f"üíµ –û—Å—Ç–∞–ª–æ—Å—å –¥–µ–Ω–µ–≥: {remaining_money:.2f} —É.–µ.\n"
                f"üìÖ –î–µ–Ω–µ–≥ –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –∑–∞ –¥–µ–Ω—å: {daily_expense_limit:.2f} —É.–µ.\n"
                f"üíº –†–µ–∑–µ—Ä–≤ –Ω–∞ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π: {emergency_fund:.2f} —É.–µ."
            )
            bot.send_message(chat_id, norm_message)
        else:
            bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã.")
    else:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

def handle_calendar(message):
    chat_id = message.chat.id
    user_info = user_data.get(chat_id)
    
    if user_info:
        today = datetime.now().date()
        salary_date = user_info.get('salary_date')
        advance_date = user_info.get('advance_date')
        
        response = ""
        
        if salary_date:
            days_until_salary = (salary_date - today).days
            response += f"üë∑ –î–æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã –æ—Å—Ç–∞–ª–æ—Å—å: {days_until_salary} –¥–Ω–µ–π.\n"
        if advance_date:
            days_until_advance = (advance_date - today).days
            response += f"üí∞ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≤–∞–Ω—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {days_until_advance} –¥–Ω–µ–π."     
        bot.send_message(chat_id, response or "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ –∏–ª–∏ –∞–≤–∞–Ω—Å–µ.")
    else:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

def setup_notifications(chat_id):
    user_info = user_data.get(chat_id)
    if user_info:
        salary_date = user_info.get('salary_date')
        advance_date = user_info.get('advance_date')
        
        if salary_date:
            schedule.every().day.at("09:00").do(
                lambda: bot.send_message(chat_id, "–ó–∞–≤—Ç—Ä–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞! üéâ")
            ).tag(str(chat_id))
        
        if advance_date:
            schedule.every().day.at("09:00").do(
                lambda: bot.send_message(chat_id, "–ó–∞–≤—Ç—Ä–∞ –∞–≤–∞–Ω—Å! üí∞")
            ).tag(str(chat_id))

bot.polling(none_stop=True)
