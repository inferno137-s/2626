import telebot
from telebot import types
from datetime import datetime, timedelta

bot = telebot.TeleBot('7677815065:AAHAJOUVybTC2VnUiK41dr9X7A3fl7NKmXE')

# States
STATE_PROFESSION = 0
STATE_PAYDAY = 1
STATE_SALARY = 2
STATE_FINISHED = 3

user_data = {}


@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, "üéâ –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å —Å—á–∏—Ç–∞—Ç—å —Å–≤–æ–π –±—é–¥–∂–µ—Ç!")
    show_main_menu(message)


def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–û–ø—Ä–æ—Å"), types.KeyboardButton("–ú–µ–Ω—é"), types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å"))
    bot.send_message(message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)


def show_powerlifting_options(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "–ú–æ–∏ –¥–µ–Ω—å–≥–∏",
        "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤",
        "–ö–∞–ª–µ–Ω–¥–∞—Ä—å",
        "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤",
        "–°–æ–≤–µ—Ç—ã",
        "üîô –ù–∞–∑–∞–¥"
    ]
    markup.add(*[types.KeyboardButton(btn) for btn in buttons])
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç–µ–º:", reply_markup=markup)


def send_excel_file(message):
    files = {
        "–ú–æ–∏ –¥–µ–Ω—å–≥–∏": "\\path_to_file\\–ú–æ–∏_–¥–µ–Ω—å–≥–∏.xlsx",
        "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤": "\\path_to_file\\–ò—Å—Ç–æ—Ä–∏—è_—Ä–∞—Å—Ö–æ–¥–æ–≤.xlsx",
        "–ö–∞–ª–µ–Ω–¥–∞—Ä—å": "\\path_to_file\\–ö–∞–ª–µ–Ω–¥–∞—Ä—å.xlsx",
        "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤": "\\path_to_file\\–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–π_–Ω–æ—Ä–º—ã_—Ä–∞—Å—Ö–æ–¥–æ–≤.xlsx",
        "–°–æ–≤–µ—Ç—ã": "\\path_to_file\\–°–æ–≤–µ—Ç—ã.docx"
    }

    file_name = files.get(message.text)
    if file_name:
        try:
            with open(file_name, 'rb') as file:
                bot.send_document(message.chat.id, file)
                back_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                back_markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
                bot.send_message(message.chat.id, "–í–æ—Ç —Ñ–∞–π–ª. –ù–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è.", reply_markup=back_markup)
        except FileNotFoundError:
            bot.send_message(message.chat.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
        except Exception as e:
            bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")


@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    chat_id = message.chat.id
    if message.chat.type == 'private':
        if message.text == "–ú–µ–Ω—é":
            show_powerlifting_options(message)
        elif message.text == "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤":
            show_expense_history(message)
        elif message.text == "–ö–∞–ª–µ–Ω–¥–∞—Ä—å":
            show_salary_countdown(message)
        elif message.text == "–ú–æ–∏ –¥–µ–Ω—å–≥–∏":
            send_excel_file(message)
        elif message.text == "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤":
            send_excel_file(message)
        elif message.text == "–°–æ–≤–µ—Ç—ã":
            send_excel_file(message)
        elif message.text == "üîô –ù–∞–∑–∞–¥":
            show_main_menu(message)
        elif message.text == "–û–ø—Ä–æ—Å":
            user_data[chat_id] = {}
            ask_profession(message)
        elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å":
            show_profile(message)


def show_salary_countdown(message):
    chat_id = message.chat.id
    user_info = user_data.get(chat_id, {})
    
    if 'payday' in user_info:
        payday = int(user_info['payday'])
        today = datetime.today()
        next_salary_date = datetime(today.year, today.month, payday)

        if next_salary_date < today:
            
            if today.month == 12:
                next_salary_date = datetime(today.year + 1, 1, payday)
            else:
                next_salary_date = datetime(today.year, today.month + 1, payday)

        days_until_salary = (next_salary_date - today).days
        bot.send_message(chat_id, f"–î–æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã –æ—Å—Ç–∞–ª–æ—Å—å {days_until_salary} –¥–Ω–µ–π.")
    else:
        bot.send_message(chat_id, "–î–∞—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –µ—ë.")


def show_expense_history(message):
    chat_id = message.chat.id
    expense_data = user_data.get(chat_id, {}).get('expenses', [])

    if expense_data:
        history_text = "üßæ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤:\n"
        for expense in expense_data:
            history_text += f"–î–∞—Ç–∞: {expense['date']} - –°—É–º–º–∞: {expense['amount']}‚ÇΩ\n"
    else:
        history_text = "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Ö –∑–¥–µ—Å—å."

    bot.send_message(chat_id, history_text)


def log_expense(chat_id, amount):
    expense = {
        'date': datetime.today().strftime('%Y-%m-%d'),
        'amount': amount
    }
    if 'expenses' in user_data[chat_id]:
        user_data[chat_id]['expenses'].append(expense)
    else:
        user_data[chat_id]['expenses'] = [expense]


def ask_profession(message):
    chat_id = message.chat.id
    msg = bot.send_message(chat_id, "–ö–∞–∫–∞—è –≤–∞—à–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è?")
    bot.register_next_step_handler(msg, process_profession)


def process_profession(message):
    chat_id = message.chat.id
    user_data[chat_id]['profession'] = message.text
    ask_payday(message)


def ask_payday(message):
    chat_id = message.chat.id
    msg = bot.send_message(chat_id, "–ö–∞–∫–æ–π –≤–∞—à –¥–µ–Ω—å –≤—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç—ã (—á–∏—Å–ª–æ)?")
    bot.register_next_step_handler(msg, process_payday)


def process_payday(message):
    chat_id = message.chat.id
    user_data[chat_id]['payday'] = message.text
    ask_salary(message)


def ask_salary(message):
    chat_id = message.chat.id
    msg = bot.send_message(chat_id, "–ö–∞–∫–æ–π –≤–∞—à —Ä–∞–∑–º–µ—Ä –∑–∞—Ä–ø–ª–∞—Ç—ã?")
    bot.register_next_step_handler(msg, process_salary)


def process_salary(message):
    chat_id = message.chat.id
    user_data[chat_id]['salary'] = message.text
    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω.")
    show_main_menu(message)


def show_profile(message):
    chat_id = message.chat.id
    user_info = user_data.get(chat_id, {})
    
    if user_info:
        profile_text = (
            "üìã –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {user_info.get('profession', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"–î–µ–Ω—å –≤—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç—ã: {user_info.get('payday', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"–†–∞–∑–º–µ—Ä –∑–∞—Ä–ø–ª–∞—Ç—ã: {user_info.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        )
    else:
        profile_text = "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç. –ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ."

    bot.send_message(chat_id, profile_text)


@bot.message_handler(commands=['add_expense'])
def add_expense(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    bot.register_next_step_handler(message, process_add_expense)


def process_add_expense(message):
    chat_id = message.chat.id
    amount = message.text

    if amount.isdigit():
        log_expense(chat_id, amount)
        bot.send_message(chat_id, "–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")


bot.polling()



